import os
import conf
from telegram import Bot

from telegram import InlineQueryResultArticle
from telegram import InputTextMessageContent

from telegram.ext import Updater
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import InlineQueryHandler
from telegram.utils.request import Request
from inline.search import Searcher

from colors import ColorsPrint
from bot_logic import *

from modules.home_menu.home_logic import get_main_inline_menu
from modules.keyboard.keyboard_logic import get_base_keyboard_btns


search = Searcher()


@log_error
def inline_handler(update: Update, context: CallbackContext):
    query = update.inline_query.query
    query = query.strip().lower()

    # –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–º—ë–Ω –º–æ–Ω–µ—Ç
    results = []
    names = search.parse_query(text=query)
    prices = search.get_prices(names=names)
    results.append(
        InlineQueryResultArticle(
            id=355,
            title=f'{names} now?',
            input_message_content=InputTextMessageContent(
                message_text=f'{names} is {prices}$ now!',
            ),
        )
    )
    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å
    if query and not results:
        results.append(
            InlineQueryResultArticle(
                id=999,
                title='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å',
                input_message_content=InputTextMessageContent(
                    message_text=f'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}"',
                ),
            )
        )

    update.inline_query.answer(
        results=results,
        cache_time=10,
    )


@log_error
def do_start(update: Update, context: CallbackContext):
    sti = open('static/stickers/hello.tgs', 'rb')
    # –°–æ–∑–¥–∞—é –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
    context.bot.send_chat_action(
        chat_id=update.effective_message.chat_id,
        action=ChatAction.TYPING
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    context.bot.send_sticker(
        chat_id=update.effective_message.chat_id,
        sticker=sti
    )
    # –°–æ–∑–¥–∞—é –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
    context.bot.send_chat_action(
        chat_id=update.effective_message.chat_id,
        action=ChatAction.TYPING
    )
    update.message.reply_text(
        text=f"–ü—Ä–∏–≤–µ—Ç, {update.message.chat.first_name}! üëã\n–Ø <b>{context.bot.get_me().first_name}</b>.\n–° —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É "
             f"–Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.",
        reply_markup=get_base_keyboard_btns(),
        parse_mode=ParseMode.HTML,
    )

    # –ü—Ä–∏–∫—Ä–µ–ø–∏–ª –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    get_main_inline_menu(update)

    print(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/start` ‚Äî ', ColorsPrint('OK', 'suc').do_colored())


@log_error
def do_echo(update: Update, context: CallbackContext):
    # –í—ã–∑—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard_btns_handler(update, context)


@log_error
def do_help(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
    )
    print(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/help` ‚Äî ', ColorsPrint('OK', 'suc').do_colored())


@log_error
def main():
    req = Request(
        connect_timeout=0.5,
    )
    bot = Bot(
        request=req,
        token=config.TOKEN,
        # base_url='https://telegg.ru/orig/bot',
    )
    updater = Updater(
        bot=bot,
        use_context=True,
    )

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram API
    os.system('clear')
    print(ColorsPrint('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...', 'att').do_colored())
    print(f'\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {bot.get_me().first_name} ‚Äî ', ColorsPrint('OK', 'suc').do_colored())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp = updater.dispatcher

    dp.add_handler(InlineQueryHandler(inline_handler))
    dp.add_handler(CommandHandler("start", do_start))
    dp.add_handler(CommandHandler("help", do_help))
    dp.add_handler(MessageHandler(Filters.text, do_echo))
    dp.add_handler(CallbackQueryHandler(callback=main_callback_handler))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
